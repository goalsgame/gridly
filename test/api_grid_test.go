/*
Gridly API

Testing GridApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package gridly

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    gridly "./openapi"
)

func Test_gridly_GridApiService(t *testing.T) {

    configuration := gridly.NewConfiguration()
    apiClient := gridly.NewAPIClient(configuration)

    t.Run("Test GridApiService Create", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.GridApi.Create(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GridApiService CreateCategory", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var gridId string

        resp, httpRes, err := apiClient.GridApi.CreateCategory(context.Background(), gridId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GridApiService Delete", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var gridId string

        resp, httpRes, err := apiClient.GridApi.Delete(context.Background(), gridId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GridApiService DeleteCategory", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var gridId string
        var categoryId string

        resp, httpRes, err := apiClient.GridApi.DeleteCategory(context.Background(), gridId, categoryId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GridApiService DeleteFile", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var gridId string
        var categoryId string
        var fileId string

        resp, httpRes, err := apiClient.GridApi.DeleteFile(context.Background(), gridId, categoryId, fileId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GridApiService Get", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var gridId string

        resp, httpRes, err := apiClient.GridApi.Get(context.Background(), gridId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GridApiService GetSetting", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var gridId string

        resp, httpRes, err := apiClient.GridApi.GetSetting(context.Background(), gridId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GridApiService List", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.GridApi.List(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GridApiService ListFiles", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var gridId string

        resp, httpRes, err := apiClient.GridApi.ListFiles(context.Background(), gridId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GridApiService ListTemplateGrids", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.GridApi.ListTemplateGrids(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GridApiService Update", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var gridId string

        resp, httpRes, err := apiClient.GridApi.Update(context.Background(), gridId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GridApiService UpdateCategory", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var gridId string
        var categoryId string

        resp, httpRes, err := apiClient.GridApi.UpdateCategory(context.Background(), gridId, categoryId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GridApiService UpdateSetting", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var gridId string

        resp, httpRes, err := apiClient.GridApi.UpdateSetting(context.Background(), gridId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GridApiService UploadSettingFile", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var gridId string
        var categoryId string

        resp, httpRes, err := apiClient.GridApi.UploadSettingFile(context.Background(), gridId, categoryId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
