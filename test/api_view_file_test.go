/*
Gridly API

Testing ViewFileApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package gridly

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    gridly "./openapi"
)

func Test_gridly_ViewFileApiService(t *testing.T) {

    configuration := gridly.NewConfiguration()
    apiClient := gridly.NewAPIClient(configuration)

    t.Run("Test ViewFileApiService Delete", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var viewId string

        resp, httpRes, err := apiClient.ViewFileApi.Delete(context.Background(), viewId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ViewFileApiService Download", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var fileId string
        var viewId string

        resp, httpRes, err := apiClient.ViewFileApi.Download(context.Background(), fileId, viewId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ViewFileApiService Upload", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var viewId string

        resp, httpRes, err := apiClient.ViewFileApi.Upload(context.Background(), viewId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ViewFileApiService UploadZip", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var viewId string

        resp, httpRes, err := apiClient.ViewFileApi.UploadZip(context.Background(), viewId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
