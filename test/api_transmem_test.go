/*
Gridly API

Testing TransmemApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package gridly

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    gridly "./openapi"
)

func Test_gridly_TransmemApiService(t *testing.T) {

    configuration := gridly.NewConfiguration()
    apiClient := gridly.NewAPIClient(configuration)

    t.Run("Test TransmemApiService Cleanup", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var tmId string

        resp, httpRes, err := apiClient.TransmemApi.Cleanup(context.Background(), tmId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TransmemApiService Create", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.TransmemApi.Create(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TransmemApiService CreateWithFile", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.TransmemApi.CreateWithFile(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TransmemApiService Delete", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var tmId string

        resp, httpRes, err := apiClient.TransmemApi.Delete(context.Background(), tmId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TransmemApiService Export", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var tmId string

        resp, httpRes, err := apiClient.TransmemApi.Export(context.Background(), tmId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TransmemApiService Get", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var tmId string

        resp, httpRes, err := apiClient.TransmemApi.Get(context.Background(), tmId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TransmemApiService ImportTmx", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var tmId string

        resp, httpRes, err := apiClient.TransmemApi.ImportTmx(context.Background(), tmId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TransmemApiService ListTM", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.TransmemApi.ListTM(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TransmemApiService Update", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var tmId string

        resp, httpRes, err := apiClient.TransmemApi.Update(context.Background(), tmId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
