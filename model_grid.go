/*
Gridly API

Gridly API documentation

API version: 3.20.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gridly

import (
	"encoding/json"
)

// Grid struct for Grid
type Grid struct {
	BranchId *string `json:"branchId,omitempty"`
	Branches *[]Grid `json:"branches,omitempty"`
	CustomProperties *map[string]map[string]interface{} `json:"customProperties,omitempty"`
	DefaultAccessViewId *string `json:"defaultAccessViewId,omitempty"`
	GroupTagDefinition *[]string `json:"groupTagDefinition,omitempty"`
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	ParentGridId *string `json:"parentGridId,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewGrid instantiates a new Grid object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGrid() *Grid {
	this := Grid{}
	return &this
}

// NewGridWithDefaults instantiates a new Grid object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGridWithDefaults() *Grid {
	this := Grid{}
	return &this
}

// GetBranchId returns the BranchId field value if set, zero value otherwise.
func (o *Grid) GetBranchId() string {
	if o == nil || o.BranchId == nil {
		var ret string
		return ret
	}
	return *o.BranchId
}

// GetBranchIdOk returns a tuple with the BranchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Grid) GetBranchIdOk() (*string, bool) {
	if o == nil || o.BranchId == nil {
		return nil, false
	}
	return o.BranchId, true
}

// HasBranchId returns a boolean if a field has been set.
func (o *Grid) HasBranchId() bool {
	if o != nil && o.BranchId != nil {
		return true
	}

	return false
}

// SetBranchId gets a reference to the given string and assigns it to the BranchId field.
func (o *Grid) SetBranchId(v string) {
	o.BranchId = &v
}

// GetBranches returns the Branches field value if set, zero value otherwise.
func (o *Grid) GetBranches() []Grid {
	if o == nil || o.Branches == nil {
		var ret []Grid
		return ret
	}
	return *o.Branches
}

// GetBranchesOk returns a tuple with the Branches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Grid) GetBranchesOk() (*[]Grid, bool) {
	if o == nil || o.Branches == nil {
		return nil, false
	}
	return o.Branches, true
}

// HasBranches returns a boolean if a field has been set.
func (o *Grid) HasBranches() bool {
	if o != nil && o.Branches != nil {
		return true
	}

	return false
}

// SetBranches gets a reference to the given []Grid and assigns it to the Branches field.
func (o *Grid) SetBranches(v []Grid) {
	o.Branches = &v
}

// GetCustomProperties returns the CustomProperties field value if set, zero value otherwise.
func (o *Grid) GetCustomProperties() map[string]map[string]interface{} {
	if o == nil || o.CustomProperties == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.CustomProperties
}

// GetCustomPropertiesOk returns a tuple with the CustomProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Grid) GetCustomPropertiesOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.CustomProperties == nil {
		return nil, false
	}
	return o.CustomProperties, true
}

// HasCustomProperties returns a boolean if a field has been set.
func (o *Grid) HasCustomProperties() bool {
	if o != nil && o.CustomProperties != nil {
		return true
	}

	return false
}

// SetCustomProperties gets a reference to the given map[string]map[string]interface{} and assigns it to the CustomProperties field.
func (o *Grid) SetCustomProperties(v map[string]map[string]interface{}) {
	o.CustomProperties = &v
}

// GetDefaultAccessViewId returns the DefaultAccessViewId field value if set, zero value otherwise.
func (o *Grid) GetDefaultAccessViewId() string {
	if o == nil || o.DefaultAccessViewId == nil {
		var ret string
		return ret
	}
	return *o.DefaultAccessViewId
}

// GetDefaultAccessViewIdOk returns a tuple with the DefaultAccessViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Grid) GetDefaultAccessViewIdOk() (*string, bool) {
	if o == nil || o.DefaultAccessViewId == nil {
		return nil, false
	}
	return o.DefaultAccessViewId, true
}

// HasDefaultAccessViewId returns a boolean if a field has been set.
func (o *Grid) HasDefaultAccessViewId() bool {
	if o != nil && o.DefaultAccessViewId != nil {
		return true
	}

	return false
}

// SetDefaultAccessViewId gets a reference to the given string and assigns it to the DefaultAccessViewId field.
func (o *Grid) SetDefaultAccessViewId(v string) {
	o.DefaultAccessViewId = &v
}

// GetGroupTagDefinition returns the GroupTagDefinition field value if set, zero value otherwise.
func (o *Grid) GetGroupTagDefinition() []string {
	if o == nil || o.GroupTagDefinition == nil {
		var ret []string
		return ret
	}
	return *o.GroupTagDefinition
}

// GetGroupTagDefinitionOk returns a tuple with the GroupTagDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Grid) GetGroupTagDefinitionOk() (*[]string, bool) {
	if o == nil || o.GroupTagDefinition == nil {
		return nil, false
	}
	return o.GroupTagDefinition, true
}

// HasGroupTagDefinition returns a boolean if a field has been set.
func (o *Grid) HasGroupTagDefinition() bool {
	if o != nil && o.GroupTagDefinition != nil {
		return true
	}

	return false
}

// SetGroupTagDefinition gets a reference to the given []string and assigns it to the GroupTagDefinition field.
func (o *Grid) SetGroupTagDefinition(v []string) {
	o.GroupTagDefinition = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Grid) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Grid) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Grid) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Grid) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Grid) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Grid) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Grid) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Grid) SetName(v string) {
	o.Name = &v
}

// GetParentGridId returns the ParentGridId field value if set, zero value otherwise.
func (o *Grid) GetParentGridId() string {
	if o == nil || o.ParentGridId == nil {
		var ret string
		return ret
	}
	return *o.ParentGridId
}

// GetParentGridIdOk returns a tuple with the ParentGridId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Grid) GetParentGridIdOk() (*string, bool) {
	if o == nil || o.ParentGridId == nil {
		return nil, false
	}
	return o.ParentGridId, true
}

// HasParentGridId returns a boolean if a field has been set.
func (o *Grid) HasParentGridId() bool {
	if o != nil && o.ParentGridId != nil {
		return true
	}

	return false
}

// SetParentGridId gets a reference to the given string and assigns it to the ParentGridId field.
func (o *Grid) SetParentGridId(v string) {
	o.ParentGridId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Grid) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Grid) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Grid) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Grid) SetStatus(v string) {
	o.Status = &v
}

func (o Grid) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BranchId != nil {
		toSerialize["branchId"] = o.BranchId
	}
	if o.Branches != nil {
		toSerialize["branches"] = o.Branches
	}
	if o.CustomProperties != nil {
		toSerialize["customProperties"] = o.CustomProperties
	}
	if o.DefaultAccessViewId != nil {
		toSerialize["defaultAccessViewId"] = o.DefaultAccessViewId
	}
	if o.GroupTagDefinition != nil {
		toSerialize["groupTagDefinition"] = o.GroupTagDefinition
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.ParentGridId != nil {
		toSerialize["parentGridId"] = o.ParentGridId
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableGrid struct {
	value *Grid
	isSet bool
}

func (v NullableGrid) Get() *Grid {
	return v.value
}

func (v *NullableGrid) Set(val *Grid) {
	v.value = val
	v.isSet = true
}

func (v NullableGrid) IsSet() bool {
	return v.isSet
}

func (v *NullableGrid) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGrid(val *Grid) *NullableGrid {
	return &NullableGrid{value: val, isSet: true}
}

func (v NullableGrid) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGrid) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


