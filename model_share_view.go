/*
Gridly API

Gridly API documentation

API version: 4.29.1
Contact: support@gridly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gridly

import (
	"encoding/json"
	"time"
)

// ShareView struct for ShareView
type ShareView struct {
	CompanyId *string `json:"companyId,omitempty"`
	Link *string `json:"link,omitempty"`
	Active *bool `json:"active,omitempty"`
	ViewId *string `json:"viewId,omitempty"`
	IncludeGridHistory *bool `json:"includeGridHistory,omitempty"`
	CreatedDate *time.Time `json:"createdDate,omitempty"`
	LastModifiedDate *time.Time `json:"lastModifiedDate,omitempty"`
}

// NewShareView instantiates a new ShareView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShareView() *ShareView {
	this := ShareView{}
	return &this
}

// NewShareViewWithDefaults instantiates a new ShareView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShareViewWithDefaults() *ShareView {
	this := ShareView{}
	return &this
}

// GetCompanyId returns the CompanyId field value if set, zero value otherwise.
func (o *ShareView) GetCompanyId() string {
	if o == nil || o.CompanyId == nil {
		var ret string
		return ret
	}
	return *o.CompanyId
}

// GetCompanyIdOk returns a tuple with the CompanyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareView) GetCompanyIdOk() (*string, bool) {
	if o == nil || o.CompanyId == nil {
		return nil, false
	}
	return o.CompanyId, true
}

// HasCompanyId returns a boolean if a field has been set.
func (o *ShareView) HasCompanyId() bool {
	if o != nil && o.CompanyId != nil {
		return true
	}

	return false
}

// SetCompanyId gets a reference to the given string and assigns it to the CompanyId field.
func (o *ShareView) SetCompanyId(v string) {
	o.CompanyId = &v
}

// GetLink returns the Link field value if set, zero value otherwise.
func (o *ShareView) GetLink() string {
	if o == nil || o.Link == nil {
		var ret string
		return ret
	}
	return *o.Link
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareView) GetLinkOk() (*string, bool) {
	if o == nil || o.Link == nil {
		return nil, false
	}
	return o.Link, true
}

// HasLink returns a boolean if a field has been set.
func (o *ShareView) HasLink() bool {
	if o != nil && o.Link != nil {
		return true
	}

	return false
}

// SetLink gets a reference to the given string and assigns it to the Link field.
func (o *ShareView) SetLink(v string) {
	o.Link = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *ShareView) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareView) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *ShareView) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *ShareView) SetActive(v bool) {
	o.Active = &v
}

// GetViewId returns the ViewId field value if set, zero value otherwise.
func (o *ShareView) GetViewId() string {
	if o == nil || o.ViewId == nil {
		var ret string
		return ret
	}
	return *o.ViewId
}

// GetViewIdOk returns a tuple with the ViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareView) GetViewIdOk() (*string, bool) {
	if o == nil || o.ViewId == nil {
		return nil, false
	}
	return o.ViewId, true
}

// HasViewId returns a boolean if a field has been set.
func (o *ShareView) HasViewId() bool {
	if o != nil && o.ViewId != nil {
		return true
	}

	return false
}

// SetViewId gets a reference to the given string and assigns it to the ViewId field.
func (o *ShareView) SetViewId(v string) {
	o.ViewId = &v
}

// GetIncludeGridHistory returns the IncludeGridHistory field value if set, zero value otherwise.
func (o *ShareView) GetIncludeGridHistory() bool {
	if o == nil || o.IncludeGridHistory == nil {
		var ret bool
		return ret
	}
	return *o.IncludeGridHistory
}

// GetIncludeGridHistoryOk returns a tuple with the IncludeGridHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareView) GetIncludeGridHistoryOk() (*bool, bool) {
	if o == nil || o.IncludeGridHistory == nil {
		return nil, false
	}
	return o.IncludeGridHistory, true
}

// HasIncludeGridHistory returns a boolean if a field has been set.
func (o *ShareView) HasIncludeGridHistory() bool {
	if o != nil && o.IncludeGridHistory != nil {
		return true
	}

	return false
}

// SetIncludeGridHistory gets a reference to the given bool and assigns it to the IncludeGridHistory field.
func (o *ShareView) SetIncludeGridHistory(v bool) {
	o.IncludeGridHistory = &v
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise.
func (o *ShareView) GetCreatedDate() time.Time {
	if o == nil || o.CreatedDate == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareView) GetCreatedDateOk() (*time.Time, bool) {
	if o == nil || o.CreatedDate == nil {
		return nil, false
	}
	return o.CreatedDate, true
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *ShareView) HasCreatedDate() bool {
	if o != nil && o.CreatedDate != nil {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given time.Time and assigns it to the CreatedDate field.
func (o *ShareView) SetCreatedDate(v time.Time) {
	o.CreatedDate = &v
}

// GetLastModifiedDate returns the LastModifiedDate field value if set, zero value otherwise.
func (o *ShareView) GetLastModifiedDate() time.Time {
	if o == nil || o.LastModifiedDate == nil {
		var ret time.Time
		return ret
	}
	return *o.LastModifiedDate
}

// GetLastModifiedDateOk returns a tuple with the LastModifiedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareView) GetLastModifiedDateOk() (*time.Time, bool) {
	if o == nil || o.LastModifiedDate == nil {
		return nil, false
	}
	return o.LastModifiedDate, true
}

// HasLastModifiedDate returns a boolean if a field has been set.
func (o *ShareView) HasLastModifiedDate() bool {
	if o != nil && o.LastModifiedDate != nil {
		return true
	}

	return false
}

// SetLastModifiedDate gets a reference to the given time.Time and assigns it to the LastModifiedDate field.
func (o *ShareView) SetLastModifiedDate(v time.Time) {
	o.LastModifiedDate = &v
}

func (o ShareView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CompanyId != nil {
		toSerialize["companyId"] = o.CompanyId
	}
	if o.Link != nil {
		toSerialize["link"] = o.Link
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.ViewId != nil {
		toSerialize["viewId"] = o.ViewId
	}
	if o.IncludeGridHistory != nil {
		toSerialize["includeGridHistory"] = o.IncludeGridHistory
	}
	if o.CreatedDate != nil {
		toSerialize["createdDate"] = o.CreatedDate
	}
	if o.LastModifiedDate != nil {
		toSerialize["lastModifiedDate"] = o.LastModifiedDate
	}
	return json.Marshal(toSerialize)
}

type NullableShareView struct {
	value *ShareView
	isSet bool
}

func (v NullableShareView) Get() *ShareView {
	return v.value
}

func (v *NullableShareView) Set(val *ShareView) {
	v.value = val
	v.isSet = true
}

func (v NullableShareView) IsSet() bool {
	return v.isSet
}

func (v *NullableShareView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShareView(val *ShareView) *NullableShareView {
	return &NullableShareView{value: val, isSet: true}
}

func (v NullableShareView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShareView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


