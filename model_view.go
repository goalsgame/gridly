/*
Gridly API

Gridly API documentation

API version: 3.21.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gridly

import (
	"encoding/json"
)

// View struct for View
type View struct {
	CustomProperties *map[string]map[string]interface{} `json:"customProperties,omitempty"`
	Description *string `json:"description,omitempty"`
	GridId *string `json:"gridId,omitempty"`
	GroupTagDefinition *[]string `json:"groupTagDefinition,omitempty"`
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewView instantiates a new View object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewView() *View {
	this := View{}
	return &this
}

// NewViewWithDefaults instantiates a new View object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewWithDefaults() *View {
	this := View{}
	return &this
}

// GetCustomProperties returns the CustomProperties field value if set, zero value otherwise.
func (o *View) GetCustomProperties() map[string]map[string]interface{} {
	if o == nil || o.CustomProperties == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.CustomProperties
}

// GetCustomPropertiesOk returns a tuple with the CustomProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetCustomPropertiesOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.CustomProperties == nil {
		return nil, false
	}
	return o.CustomProperties, true
}

// HasCustomProperties returns a boolean if a field has been set.
func (o *View) HasCustomProperties() bool {
	if o != nil && o.CustomProperties != nil {
		return true
	}

	return false
}

// SetCustomProperties gets a reference to the given map[string]map[string]interface{} and assigns it to the CustomProperties field.
func (o *View) SetCustomProperties(v map[string]map[string]interface{}) {
	o.CustomProperties = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *View) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *View) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *View) SetDescription(v string) {
	o.Description = &v
}

// GetGridId returns the GridId field value if set, zero value otherwise.
func (o *View) GetGridId() string {
	if o == nil || o.GridId == nil {
		var ret string
		return ret
	}
	return *o.GridId
}

// GetGridIdOk returns a tuple with the GridId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetGridIdOk() (*string, bool) {
	if o == nil || o.GridId == nil {
		return nil, false
	}
	return o.GridId, true
}

// HasGridId returns a boolean if a field has been set.
func (o *View) HasGridId() bool {
	if o != nil && o.GridId != nil {
		return true
	}

	return false
}

// SetGridId gets a reference to the given string and assigns it to the GridId field.
func (o *View) SetGridId(v string) {
	o.GridId = &v
}

// GetGroupTagDefinition returns the GroupTagDefinition field value if set, zero value otherwise.
func (o *View) GetGroupTagDefinition() []string {
	if o == nil || o.GroupTagDefinition == nil {
		var ret []string
		return ret
	}
	return *o.GroupTagDefinition
}

// GetGroupTagDefinitionOk returns a tuple with the GroupTagDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetGroupTagDefinitionOk() (*[]string, bool) {
	if o == nil || o.GroupTagDefinition == nil {
		return nil, false
	}
	return o.GroupTagDefinition, true
}

// HasGroupTagDefinition returns a boolean if a field has been set.
func (o *View) HasGroupTagDefinition() bool {
	if o != nil && o.GroupTagDefinition != nil {
		return true
	}

	return false
}

// SetGroupTagDefinition gets a reference to the given []string and assigns it to the GroupTagDefinition field.
func (o *View) SetGroupTagDefinition(v []string) {
	o.GroupTagDefinition = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *View) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *View) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *View) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *View) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *View) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *View) SetName(v string) {
	o.Name = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *View) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *View) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *View) SetStatus(v string) {
	o.Status = &v
}

func (o View) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CustomProperties != nil {
		toSerialize["customProperties"] = o.CustomProperties
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.GridId != nil {
		toSerialize["gridId"] = o.GridId
	}
	if o.GroupTagDefinition != nil {
		toSerialize["groupTagDefinition"] = o.GroupTagDefinition
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableView struct {
	value *View
	isSet bool
}

func (v NullableView) Get() *View {
	return v.value
}

func (v *NullableView) Set(val *View) {
	v.value = val
	v.isSet = true
}

func (v NullableView) IsSet() bool {
	return v.isSet
}

func (v *NullableView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableView(val *View) *NullableView {
	return &NullableView{value: val, isSet: true}
}

func (v NullableView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


