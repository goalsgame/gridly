/*
Gridly API

Gridly API documentation

API version: 4.29.1
Contact: support@gridly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gridly

import (
	"encoding/json"
)

// FetchRecordHistoryRequest struct for FetchRecordHistoryRequest
type FetchRecordHistoryRequest struct {
	ColumnIds []string `json:"columnIds,omitempty"`
	Query *string `json:"query,omitempty"`
	Sort *string `json:"sort,omitempty"`
	GroupBy []string `json:"groupBy,omitempty"`
	Page *string `json:"page,omitempty"`
	FetchOptions *string `json:"fetchOptions,omitempty"`
	IncludeSystemUser *bool `json:"includeSystemUser,omitempty"`
}

// NewFetchRecordHistoryRequest instantiates a new FetchRecordHistoryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFetchRecordHistoryRequest() *FetchRecordHistoryRequest {
	this := FetchRecordHistoryRequest{}
	return &this
}

// NewFetchRecordHistoryRequestWithDefaults instantiates a new FetchRecordHistoryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFetchRecordHistoryRequestWithDefaults() *FetchRecordHistoryRequest {
	this := FetchRecordHistoryRequest{}
	return &this
}

// GetColumnIds returns the ColumnIds field value if set, zero value otherwise.
func (o *FetchRecordHistoryRequest) GetColumnIds() []string {
	if o == nil || o.ColumnIds == nil {
		var ret []string
		return ret
	}
	return o.ColumnIds
}

// GetColumnIdsOk returns a tuple with the ColumnIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchRecordHistoryRequest) GetColumnIdsOk() ([]string, bool) {
	if o == nil || o.ColumnIds == nil {
		return nil, false
	}
	return o.ColumnIds, true
}

// HasColumnIds returns a boolean if a field has been set.
func (o *FetchRecordHistoryRequest) HasColumnIds() bool {
	if o != nil && o.ColumnIds != nil {
		return true
	}

	return false
}

// SetColumnIds gets a reference to the given []string and assigns it to the ColumnIds field.
func (o *FetchRecordHistoryRequest) SetColumnIds(v []string) {
	o.ColumnIds = v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *FetchRecordHistoryRequest) GetQuery() string {
	if o == nil || o.Query == nil {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchRecordHistoryRequest) GetQueryOk() (*string, bool) {
	if o == nil || o.Query == nil {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *FetchRecordHistoryRequest) HasQuery() bool {
	if o != nil && o.Query != nil {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *FetchRecordHistoryRequest) SetQuery(v string) {
	o.Query = &v
}

// GetSort returns the Sort field value if set, zero value otherwise.
func (o *FetchRecordHistoryRequest) GetSort() string {
	if o == nil || o.Sort == nil {
		var ret string
		return ret
	}
	return *o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchRecordHistoryRequest) GetSortOk() (*string, bool) {
	if o == nil || o.Sort == nil {
		return nil, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *FetchRecordHistoryRequest) HasSort() bool {
	if o != nil && o.Sort != nil {
		return true
	}

	return false
}

// SetSort gets a reference to the given string and assigns it to the Sort field.
func (o *FetchRecordHistoryRequest) SetSort(v string) {
	o.Sort = &v
}

// GetGroupBy returns the GroupBy field value if set, zero value otherwise.
func (o *FetchRecordHistoryRequest) GetGroupBy() []string {
	if o == nil || o.GroupBy == nil {
		var ret []string
		return ret
	}
	return o.GroupBy
}

// GetGroupByOk returns a tuple with the GroupBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchRecordHistoryRequest) GetGroupByOk() ([]string, bool) {
	if o == nil || o.GroupBy == nil {
		return nil, false
	}
	return o.GroupBy, true
}

// HasGroupBy returns a boolean if a field has been set.
func (o *FetchRecordHistoryRequest) HasGroupBy() bool {
	if o != nil && o.GroupBy != nil {
		return true
	}

	return false
}

// SetGroupBy gets a reference to the given []string and assigns it to the GroupBy field.
func (o *FetchRecordHistoryRequest) SetGroupBy(v []string) {
	o.GroupBy = v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *FetchRecordHistoryRequest) GetPage() string {
	if o == nil || o.Page == nil {
		var ret string
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchRecordHistoryRequest) GetPageOk() (*string, bool) {
	if o == nil || o.Page == nil {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *FetchRecordHistoryRequest) HasPage() bool {
	if o != nil && o.Page != nil {
		return true
	}

	return false
}

// SetPage gets a reference to the given string and assigns it to the Page field.
func (o *FetchRecordHistoryRequest) SetPage(v string) {
	o.Page = &v
}

// GetFetchOptions returns the FetchOptions field value if set, zero value otherwise.
func (o *FetchRecordHistoryRequest) GetFetchOptions() string {
	if o == nil || o.FetchOptions == nil {
		var ret string
		return ret
	}
	return *o.FetchOptions
}

// GetFetchOptionsOk returns a tuple with the FetchOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchRecordHistoryRequest) GetFetchOptionsOk() (*string, bool) {
	if o == nil || o.FetchOptions == nil {
		return nil, false
	}
	return o.FetchOptions, true
}

// HasFetchOptions returns a boolean if a field has been set.
func (o *FetchRecordHistoryRequest) HasFetchOptions() bool {
	if o != nil && o.FetchOptions != nil {
		return true
	}

	return false
}

// SetFetchOptions gets a reference to the given string and assigns it to the FetchOptions field.
func (o *FetchRecordHistoryRequest) SetFetchOptions(v string) {
	o.FetchOptions = &v
}

// GetIncludeSystemUser returns the IncludeSystemUser field value if set, zero value otherwise.
func (o *FetchRecordHistoryRequest) GetIncludeSystemUser() bool {
	if o == nil || o.IncludeSystemUser == nil {
		var ret bool
		return ret
	}
	return *o.IncludeSystemUser
}

// GetIncludeSystemUserOk returns a tuple with the IncludeSystemUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchRecordHistoryRequest) GetIncludeSystemUserOk() (*bool, bool) {
	if o == nil || o.IncludeSystemUser == nil {
		return nil, false
	}
	return o.IncludeSystemUser, true
}

// HasIncludeSystemUser returns a boolean if a field has been set.
func (o *FetchRecordHistoryRequest) HasIncludeSystemUser() bool {
	if o != nil && o.IncludeSystemUser != nil {
		return true
	}

	return false
}

// SetIncludeSystemUser gets a reference to the given bool and assigns it to the IncludeSystemUser field.
func (o *FetchRecordHistoryRequest) SetIncludeSystemUser(v bool) {
	o.IncludeSystemUser = &v
}

func (o FetchRecordHistoryRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ColumnIds != nil {
		toSerialize["columnIds"] = o.ColumnIds
	}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}
	if o.Sort != nil {
		toSerialize["sort"] = o.Sort
	}
	if o.GroupBy != nil {
		toSerialize["groupBy"] = o.GroupBy
	}
	if o.Page != nil {
		toSerialize["page"] = o.Page
	}
	if o.FetchOptions != nil {
		toSerialize["fetchOptions"] = o.FetchOptions
	}
	if o.IncludeSystemUser != nil {
		toSerialize["includeSystemUser"] = o.IncludeSystemUser
	}
	return json.Marshal(toSerialize)
}

type NullableFetchRecordHistoryRequest struct {
	value *FetchRecordHistoryRequest
	isSet bool
}

func (v NullableFetchRecordHistoryRequest) Get() *FetchRecordHistoryRequest {
	return v.value
}

func (v *NullableFetchRecordHistoryRequest) Set(val *FetchRecordHistoryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableFetchRecordHistoryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableFetchRecordHistoryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFetchRecordHistoryRequest(val *FetchRecordHistoryRequest) *NullableFetchRecordHistoryRequest {
	return &NullableFetchRecordHistoryRequest{value: val, isSet: true}
}

func (v NullableFetchRecordHistoryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFetchRecordHistoryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


