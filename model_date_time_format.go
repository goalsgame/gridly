/*
Gridly API

Gridly API documentation

API version: 4.15.1
Contact: support@gridly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gridly

import (
	"encoding/json"
)

// DateTimeFormat struct for DateTimeFormat
type DateTimeFormat struct {
	DateFormat *DateFormat `json:"dateFormat,omitempty"`
	TimeFormat *string `json:"timeFormat,omitempty"`
	ZoneOffset *string `json:"zoneOffset,omitempty"`
	ShowTimeZone *bool `json:"showTimeZone,omitempty"`
}

// NewDateTimeFormat instantiates a new DateTimeFormat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDateTimeFormat() *DateTimeFormat {
	this := DateTimeFormat{}
	return &this
}

// NewDateTimeFormatWithDefaults instantiates a new DateTimeFormat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDateTimeFormatWithDefaults() *DateTimeFormat {
	this := DateTimeFormat{}
	return &this
}

// GetDateFormat returns the DateFormat field value if set, zero value otherwise.
func (o *DateTimeFormat) GetDateFormat() DateFormat {
	if o == nil || o.DateFormat == nil {
		var ret DateFormat
		return ret
	}
	return *o.DateFormat
}

// GetDateFormatOk returns a tuple with the DateFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DateTimeFormat) GetDateFormatOk() (*DateFormat, bool) {
	if o == nil || o.DateFormat == nil {
		return nil, false
	}
	return o.DateFormat, true
}

// HasDateFormat returns a boolean if a field has been set.
func (o *DateTimeFormat) HasDateFormat() bool {
	if o != nil && o.DateFormat != nil {
		return true
	}

	return false
}

// SetDateFormat gets a reference to the given DateFormat and assigns it to the DateFormat field.
func (o *DateTimeFormat) SetDateFormat(v DateFormat) {
	o.DateFormat = &v
}

// GetTimeFormat returns the TimeFormat field value if set, zero value otherwise.
func (o *DateTimeFormat) GetTimeFormat() string {
	if o == nil || o.TimeFormat == nil {
		var ret string
		return ret
	}
	return *o.TimeFormat
}

// GetTimeFormatOk returns a tuple with the TimeFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DateTimeFormat) GetTimeFormatOk() (*string, bool) {
	if o == nil || o.TimeFormat == nil {
		return nil, false
	}
	return o.TimeFormat, true
}

// HasTimeFormat returns a boolean if a field has been set.
func (o *DateTimeFormat) HasTimeFormat() bool {
	if o != nil && o.TimeFormat != nil {
		return true
	}

	return false
}

// SetTimeFormat gets a reference to the given string and assigns it to the TimeFormat field.
func (o *DateTimeFormat) SetTimeFormat(v string) {
	o.TimeFormat = &v
}

// GetZoneOffset returns the ZoneOffset field value if set, zero value otherwise.
func (o *DateTimeFormat) GetZoneOffset() string {
	if o == nil || o.ZoneOffset == nil {
		var ret string
		return ret
	}
	return *o.ZoneOffset
}

// GetZoneOffsetOk returns a tuple with the ZoneOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DateTimeFormat) GetZoneOffsetOk() (*string, bool) {
	if o == nil || o.ZoneOffset == nil {
		return nil, false
	}
	return o.ZoneOffset, true
}

// HasZoneOffset returns a boolean if a field has been set.
func (o *DateTimeFormat) HasZoneOffset() bool {
	if o != nil && o.ZoneOffset != nil {
		return true
	}

	return false
}

// SetZoneOffset gets a reference to the given string and assigns it to the ZoneOffset field.
func (o *DateTimeFormat) SetZoneOffset(v string) {
	o.ZoneOffset = &v
}

// GetShowTimeZone returns the ShowTimeZone field value if set, zero value otherwise.
func (o *DateTimeFormat) GetShowTimeZone() bool {
	if o == nil || o.ShowTimeZone == nil {
		var ret bool
		return ret
	}
	return *o.ShowTimeZone
}

// GetShowTimeZoneOk returns a tuple with the ShowTimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DateTimeFormat) GetShowTimeZoneOk() (*bool, bool) {
	if o == nil || o.ShowTimeZone == nil {
		return nil, false
	}
	return o.ShowTimeZone, true
}

// HasShowTimeZone returns a boolean if a field has been set.
func (o *DateTimeFormat) HasShowTimeZone() bool {
	if o != nil && o.ShowTimeZone != nil {
		return true
	}

	return false
}

// SetShowTimeZone gets a reference to the given bool and assigns it to the ShowTimeZone field.
func (o *DateTimeFormat) SetShowTimeZone(v bool) {
	o.ShowTimeZone = &v
}

func (o DateTimeFormat) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DateFormat != nil {
		toSerialize["dateFormat"] = o.DateFormat
	}
	if o.TimeFormat != nil {
		toSerialize["timeFormat"] = o.TimeFormat
	}
	if o.ZoneOffset != nil {
		toSerialize["zoneOffset"] = o.ZoneOffset
	}
	if o.ShowTimeZone != nil {
		toSerialize["showTimeZone"] = o.ShowTimeZone
	}
	return json.Marshal(toSerialize)
}

type NullableDateTimeFormat struct {
	value *DateTimeFormat
	isSet bool
}

func (v NullableDateTimeFormat) Get() *DateTimeFormat {
	return v.value
}

func (v *NullableDateTimeFormat) Set(val *DateTimeFormat) {
	v.value = val
	v.isSet = true
}

func (v NullableDateTimeFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableDateTimeFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDateTimeFormat(val *DateTimeFormat) *NullableDateTimeFormat {
	return &NullableDateTimeFormat{value: val, isSet: true}
}

func (v NullableDateTimeFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDateTimeFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


