/*
Gridly API

Gridly API documentation

API version: 3.27.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gridly

import (
	"encoding/json"
)

// AddViewColumn struct for AddViewColumn
type AddViewColumn struct {
	Editable *bool `json:"editable,omitempty"`
	Id *string `json:"id,omitempty"`
}

// NewAddViewColumn instantiates a new AddViewColumn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddViewColumn() *AddViewColumn {
	this := AddViewColumn{}
	return &this
}

// NewAddViewColumnWithDefaults instantiates a new AddViewColumn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddViewColumnWithDefaults() *AddViewColumn {
	this := AddViewColumn{}
	return &this
}

// GetEditable returns the Editable field value if set, zero value otherwise.
func (o *AddViewColumn) GetEditable() bool {
	if o == nil || o.Editable == nil {
		var ret bool
		return ret
	}
	return *o.Editable
}

// GetEditableOk returns a tuple with the Editable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddViewColumn) GetEditableOk() (*bool, bool) {
	if o == nil || o.Editable == nil {
		return nil, false
	}
	return o.Editable, true
}

// HasEditable returns a boolean if a field has been set.
func (o *AddViewColumn) HasEditable() bool {
	if o != nil && o.Editable != nil {
		return true
	}

	return false
}

// SetEditable gets a reference to the given bool and assigns it to the Editable field.
func (o *AddViewColumn) SetEditable(v bool) {
	o.Editable = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AddViewColumn) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddViewColumn) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AddViewColumn) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AddViewColumn) SetId(v string) {
	o.Id = &v
}

func (o AddViewColumn) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Editable != nil {
		toSerialize["editable"] = o.Editable
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableAddViewColumn struct {
	value *AddViewColumn
	isSet bool
}

func (v NullableAddViewColumn) Get() *AddViewColumn {
	return v.value
}

func (v *NullableAddViewColumn) Set(val *AddViewColumn) {
	v.value = val
	v.isSet = true
}

func (v NullableAddViewColumn) IsSet() bool {
	return v.isSet
}

func (v *NullableAddViewColumn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddViewColumn(val *AddViewColumn) *NullableAddViewColumn {
	return &NullableAddViewColumn{value: val, isSet: true}
}

func (v NullableAddViewColumn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddViewColumn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


