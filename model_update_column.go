/*
Gridly API

Gridly API documentation

API version: 4.15.1
Contact: support@gridly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gridly

import (
	"encoding/json"
)

// UpdateColumn struct for UpdateColumn
type UpdateColumn struct {
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	Type *string `json:"type,omitempty"`
	LanguageCode *string `json:"languageCode,omitempty"`
	LocalizationType *string `json:"localizationType,omitempty"`
	SelectionOptions []string `json:"selectionOptions,omitempty"`
	NumberFormat *NumberFormat `json:"numberFormat,omitempty"`
	Reference *Reference `json:"reference,omitempty"`
	Formula *Formula `json:"formula,omitempty"`
	DateTimeFormat *DateTimeFormat `json:"dateTimeFormat,omitempty"`
	NewId *string `json:"newId,omitempty"`
}

// NewUpdateColumn instantiates a new UpdateColumn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateColumn() *UpdateColumn {
	this := UpdateColumn{}
	return &this
}

// NewUpdateColumnWithDefaults instantiates a new UpdateColumn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateColumnWithDefaults() *UpdateColumn {
	this := UpdateColumn{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateColumn) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateColumn) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateColumn) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateColumn) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateColumn) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateColumn) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateColumn) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateColumn) SetDescription(v string) {
	o.Description = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UpdateColumn) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateColumn) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UpdateColumn) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UpdateColumn) SetType(v string) {
	o.Type = &v
}

// GetLanguageCode returns the LanguageCode field value if set, zero value otherwise.
func (o *UpdateColumn) GetLanguageCode() string {
	if o == nil || o.LanguageCode == nil {
		var ret string
		return ret
	}
	return *o.LanguageCode
}

// GetLanguageCodeOk returns a tuple with the LanguageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateColumn) GetLanguageCodeOk() (*string, bool) {
	if o == nil || o.LanguageCode == nil {
		return nil, false
	}
	return o.LanguageCode, true
}

// HasLanguageCode returns a boolean if a field has been set.
func (o *UpdateColumn) HasLanguageCode() bool {
	if o != nil && o.LanguageCode != nil {
		return true
	}

	return false
}

// SetLanguageCode gets a reference to the given string and assigns it to the LanguageCode field.
func (o *UpdateColumn) SetLanguageCode(v string) {
	o.LanguageCode = &v
}

// GetLocalizationType returns the LocalizationType field value if set, zero value otherwise.
func (o *UpdateColumn) GetLocalizationType() string {
	if o == nil || o.LocalizationType == nil {
		var ret string
		return ret
	}
	return *o.LocalizationType
}

// GetLocalizationTypeOk returns a tuple with the LocalizationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateColumn) GetLocalizationTypeOk() (*string, bool) {
	if o == nil || o.LocalizationType == nil {
		return nil, false
	}
	return o.LocalizationType, true
}

// HasLocalizationType returns a boolean if a field has been set.
func (o *UpdateColumn) HasLocalizationType() bool {
	if o != nil && o.LocalizationType != nil {
		return true
	}

	return false
}

// SetLocalizationType gets a reference to the given string and assigns it to the LocalizationType field.
func (o *UpdateColumn) SetLocalizationType(v string) {
	o.LocalizationType = &v
}

// GetSelectionOptions returns the SelectionOptions field value if set, zero value otherwise.
func (o *UpdateColumn) GetSelectionOptions() []string {
	if o == nil || o.SelectionOptions == nil {
		var ret []string
		return ret
	}
	return o.SelectionOptions
}

// GetSelectionOptionsOk returns a tuple with the SelectionOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateColumn) GetSelectionOptionsOk() ([]string, bool) {
	if o == nil || o.SelectionOptions == nil {
		return nil, false
	}
	return o.SelectionOptions, true
}

// HasSelectionOptions returns a boolean if a field has been set.
func (o *UpdateColumn) HasSelectionOptions() bool {
	if o != nil && o.SelectionOptions != nil {
		return true
	}

	return false
}

// SetSelectionOptions gets a reference to the given []string and assigns it to the SelectionOptions field.
func (o *UpdateColumn) SetSelectionOptions(v []string) {
	o.SelectionOptions = v
}

// GetNumberFormat returns the NumberFormat field value if set, zero value otherwise.
func (o *UpdateColumn) GetNumberFormat() NumberFormat {
	if o == nil || o.NumberFormat == nil {
		var ret NumberFormat
		return ret
	}
	return *o.NumberFormat
}

// GetNumberFormatOk returns a tuple with the NumberFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateColumn) GetNumberFormatOk() (*NumberFormat, bool) {
	if o == nil || o.NumberFormat == nil {
		return nil, false
	}
	return o.NumberFormat, true
}

// HasNumberFormat returns a boolean if a field has been set.
func (o *UpdateColumn) HasNumberFormat() bool {
	if o != nil && o.NumberFormat != nil {
		return true
	}

	return false
}

// SetNumberFormat gets a reference to the given NumberFormat and assigns it to the NumberFormat field.
func (o *UpdateColumn) SetNumberFormat(v NumberFormat) {
	o.NumberFormat = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *UpdateColumn) GetReference() Reference {
	if o == nil || o.Reference == nil {
		var ret Reference
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateColumn) GetReferenceOk() (*Reference, bool) {
	if o == nil || o.Reference == nil {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *UpdateColumn) HasReference() bool {
	if o != nil && o.Reference != nil {
		return true
	}

	return false
}

// SetReference gets a reference to the given Reference and assigns it to the Reference field.
func (o *UpdateColumn) SetReference(v Reference) {
	o.Reference = &v
}

// GetFormula returns the Formula field value if set, zero value otherwise.
func (o *UpdateColumn) GetFormula() Formula {
	if o == nil || o.Formula == nil {
		var ret Formula
		return ret
	}
	return *o.Formula
}

// GetFormulaOk returns a tuple with the Formula field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateColumn) GetFormulaOk() (*Formula, bool) {
	if o == nil || o.Formula == nil {
		return nil, false
	}
	return o.Formula, true
}

// HasFormula returns a boolean if a field has been set.
func (o *UpdateColumn) HasFormula() bool {
	if o != nil && o.Formula != nil {
		return true
	}

	return false
}

// SetFormula gets a reference to the given Formula and assigns it to the Formula field.
func (o *UpdateColumn) SetFormula(v Formula) {
	o.Formula = &v
}

// GetDateTimeFormat returns the DateTimeFormat field value if set, zero value otherwise.
func (o *UpdateColumn) GetDateTimeFormat() DateTimeFormat {
	if o == nil || o.DateTimeFormat == nil {
		var ret DateTimeFormat
		return ret
	}
	return *o.DateTimeFormat
}

// GetDateTimeFormatOk returns a tuple with the DateTimeFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateColumn) GetDateTimeFormatOk() (*DateTimeFormat, bool) {
	if o == nil || o.DateTimeFormat == nil {
		return nil, false
	}
	return o.DateTimeFormat, true
}

// HasDateTimeFormat returns a boolean if a field has been set.
func (o *UpdateColumn) HasDateTimeFormat() bool {
	if o != nil && o.DateTimeFormat != nil {
		return true
	}

	return false
}

// SetDateTimeFormat gets a reference to the given DateTimeFormat and assigns it to the DateTimeFormat field.
func (o *UpdateColumn) SetDateTimeFormat(v DateTimeFormat) {
	o.DateTimeFormat = &v
}

// GetNewId returns the NewId field value if set, zero value otherwise.
func (o *UpdateColumn) GetNewId() string {
	if o == nil || o.NewId == nil {
		var ret string
		return ret
	}
	return *o.NewId
}

// GetNewIdOk returns a tuple with the NewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateColumn) GetNewIdOk() (*string, bool) {
	if o == nil || o.NewId == nil {
		return nil, false
	}
	return o.NewId, true
}

// HasNewId returns a boolean if a field has been set.
func (o *UpdateColumn) HasNewId() bool {
	if o != nil && o.NewId != nil {
		return true
	}

	return false
}

// SetNewId gets a reference to the given string and assigns it to the NewId field.
func (o *UpdateColumn) SetNewId(v string) {
	o.NewId = &v
}

func (o UpdateColumn) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.LanguageCode != nil {
		toSerialize["languageCode"] = o.LanguageCode
	}
	if o.LocalizationType != nil {
		toSerialize["localizationType"] = o.LocalizationType
	}
	if o.SelectionOptions != nil {
		toSerialize["selectionOptions"] = o.SelectionOptions
	}
	if o.NumberFormat != nil {
		toSerialize["numberFormat"] = o.NumberFormat
	}
	if o.Reference != nil {
		toSerialize["reference"] = o.Reference
	}
	if o.Formula != nil {
		toSerialize["formula"] = o.Formula
	}
	if o.DateTimeFormat != nil {
		toSerialize["dateTimeFormat"] = o.DateTimeFormat
	}
	if o.NewId != nil {
		toSerialize["newId"] = o.NewId
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateColumn struct {
	value *UpdateColumn
	isSet bool
}

func (v NullableUpdateColumn) Get() *UpdateColumn {
	return v.value
}

func (v *NullableUpdateColumn) Set(val *UpdateColumn) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateColumn) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateColumn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateColumn(val *UpdateColumn) *NullableUpdateColumn {
	return &NullableUpdateColumn{value: val, isSet: true}
}

func (v NullableUpdateColumn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateColumn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


