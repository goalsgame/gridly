/*
Gridly API

Gridly API documentation

API version: 3.21.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gridly

import (
	"encoding/json"
)

// CreateMetadata struct for CreateMetadata
type CreateMetadata struct {
	Data *map[string]string `json:"data,omitempty"`
	Id *string `json:"id,omitempty"`
}

// NewCreateMetadata instantiates a new CreateMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateMetadata() *CreateMetadata {
	this := CreateMetadata{}
	return &this
}

// NewCreateMetadataWithDefaults instantiates a new CreateMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateMetadataWithDefaults() *CreateMetadata {
	this := CreateMetadata{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *CreateMetadata) GetData() map[string]string {
	if o == nil || o.Data == nil {
		var ret map[string]string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMetadata) GetDataOk() (*map[string]string, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *CreateMetadata) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]string and assigns it to the Data field.
func (o *CreateMetadata) SetData(v map[string]string) {
	o.Data = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CreateMetadata) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMetadata) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CreateMetadata) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CreateMetadata) SetId(v string) {
	o.Id = &v
}

func (o CreateMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableCreateMetadata struct {
	value *CreateMetadata
	isSet bool
}

func (v NullableCreateMetadata) Get() *CreateMetadata {
	return v.value
}

func (v *NullableCreateMetadata) Set(val *CreateMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateMetadata(val *CreateMetadata) *NullableCreateMetadata {
	return &NullableCreateMetadata{value: val, isSet: true}
}

func (v NullableCreateMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


